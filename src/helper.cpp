#include <helper.hpp>

std::string getHostMacAddress()
{
    QList<QNetworkInterface> nets = QNetworkInterface::allInterfaces();// 获取所有网络接口列表
    int nCnt = nets.count();
    QString strMacAddr = "";
    for (int i = 0; i < nCnt; i++)
    {
        // 如果此网络接口被激活并且正在运行并且不是回环地址，则就是我们需要找的Mac地址
        if (nets[i].flags().testFlag(QNetworkInterface::IsUp) && nets[i].flags().testFlag(QNetworkInterface::IsRunning) && !nets[i].flags().testFlag(QNetworkInterface::IsLoopBack))
        {
            strMacAddr = nets[i].hardwareAddress();
            break;
        }
    }
    return strMacAddr.toStdString();
}
//――――――――――――――――
//版权声明：本文为CSDN博主「dofaster」的原创文章，遵循 CC 4.0 BY - SA 版权协议，转载请附上原文出处链接及本声明。
//原文链接：https ://blog.csdn.net/llmys/article/details/52861545



inline double euclideanDistance(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

template<typename T>
struct euclideanPoint {
    T x;
    T y;
};

template<typename T>
inline euclideanPoint<T> rotate(T x, T y, double theta) {
    euclideanPoint<T> temp;
    temp.x = cos(theta) * x + sin(theta) * y;
    temp.y = cos(theta) * y - sin(theta) * x;
    return temp;
}
